version: "3.8"

services:
  setup:
    image: alpine
    container_name: setup-runner
    working_dir: /app
    volumes:
      - .:/app
    entrypoint: ["/bin/sh", "-c"]
    command: |
      GREEN='\033[1;32m'
      YELLOW='\033[1;33m'
      RED='\033[1;31m'
      RESET='\033[0m'
      
      if [ -d "./data/postgres" ] && [ -d "./backend/uploads/policies" ]; then
        echo "${YELLOW}‚ö†Ô∏è  Diret√≥rios j√° existem. Setup n√£o √© necess√°rio.${RESET}";
        exit 0;
      fi;
      
      echo "${GREEN}üîß Criando diret√≥rios de dados e uploads...${RESET}";
      mkdir -p ./data/postgres;
      mkdir -p ./backend/uploads/policies;
      echo "üìÅ Diret√≥rio do PostgreSQL: $(realpath ./data/postgres)";
      echo "üìÅ Diret√≥rio de uploads:    $(realpath ./backend/uploads/policies)";
      
      echo "${GREEN}üîí Ajustando permiss√µes...${RESET}";
      CURRENT_UID=$(id -u);
      if [ "$CURRENT_UID" -eq 0 ]; then
        echo "${YELLOW}‚ö†Ô∏è  Executando como root. Corrigindo dono para UID 1000...${RESET}";
        chown -R 1000:1000 ./data/postgres;
        chown -R 1000:1000 ./backend/uploads/policies;
      else
        echo "${GREEN}‚úÖ Executando como usu√°rio comum (UID $CURRENT_UID). Apenas chmod aplicado.${RESET}";
      fi;
      chmod -R 755 ./data/postgres;
      chmod -R 755 ./backend/uploads/policies;
      echo "${GREEN}‚úÖ Setup conclu√≠do com sucesso!${RESET}"

  postgres:
    container_name: postgres
    image: postgres:15
    restart: unless-stopped
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - app_net
    depends_on:
      - setup

  redis:
    image: redis:7-alpine
    container_name: redis-bullmq
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
      - app_net
    depends_on:
      - setup

  adonis_app:
    container_name: adonis_app
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - setup
      - postgres
      - redis
    env_file:
      - .env
    expose:
      - "3333"
    networks:
      - app_net
    working_dir: /app
    command: node build/server.js
    volumes:
      - ./backend/uploads:/app/uploads

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL}
        VITE_APP_URL: ${VITE_APP_URL}
    ports:
      - "4173:4173"
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - app_net
    depends_on:
      - setup

volumes:
  postgres_volume:

networks:
  app_net:
    driver: bridge
