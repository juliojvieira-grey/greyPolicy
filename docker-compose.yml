version: "3.8"

services:

  postgres:
    container_name: postgres
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    networks:
      - app_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-bullmq
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
      - app_net

  adonis_app:
    image: grey-policy-backend
    container_name: adonis_app
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    expose:
      - "3333"
    networks:
      - app_net
    volumes:
      - ./backend/uploads:/app/uploads
  
  adonis_migration:
    image: grey-policy-backend
    container_name: adonis_migration
    build:
      context: ./backend
    env_file:
      - .env
    depends_on:
      adonis_app:
        condition: service_started
      postgres:
        condition: service_healthy
    command: ["sh", "/scripts/wait-for-it.sh", "postgres:5432", "--", "node", "ace", "migration:run && sleep 30"]
    networks:
      - app_net




  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL}
        VITE_APP_URL: ${VITE_APP_URL}
    ports:
      - "4173:4173"
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - app_net

volumes:
  postgres_volume:
    name: greypolicy_postgres_volume

networks:
  app_net:
    driver: bridge
